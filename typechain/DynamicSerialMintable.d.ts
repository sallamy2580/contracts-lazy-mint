/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DynamicSerialMintableInterface extends ethers.utils.Interface {
  functions: {
    "CREATE_SERIAL_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createSerial(string,string,string,string,uint256,uint256,address)": FunctionFragment;
    "currentSerial()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getContentBaseURLs(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSerial(uint256)": FunctionFragment;
    "getSerialByToken(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintSerial(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdsReserved()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateRoyaltyRecipient(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CREATE_SERIAL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createSerial",
    values: [string, string, string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentSerial",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentBaseURLs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerial",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerialByToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSerial",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdsReserved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyaltyRecipient",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CREATE_SERIAL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSerial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSerial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentBaseURLs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSerial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSerialByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintSerial", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyaltyRecipient",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CreatedSerial(uint256)": EventFragment;
    "MintedSerial(uint256,uint256,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedSerial"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedSerial"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DynamicSerialMintable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DynamicSerialMintableInterface;

  functions: {
    CREATE_SERIAL_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CREATE_SERIAL_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    createSerial(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSerial(string,string,string,string,uint256,uint256,address)"(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentSerial(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentSerial()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getContentBaseURLs(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getContentBaseURLs(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getSerial(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        description: string;
        animationStoragePath: string;
        imageStoragePath: string;
        serialSize: BigNumber;
        atSerialId: BigNumber;
        firstReservedToken: BigNumber;
        royaltyRecipient: string;
        royaltyBPS: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
      };
    }>;

    "getSerial(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        description: string;
        animationStoragePath: string;
        imageStoragePath: string;
        serialSize: BigNumber;
        atSerialId: BigNumber;
        firstReservedToken: BigNumber;
        royaltyRecipient: string;
        royaltyBPS: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
      };
    }>;

    getSerialByToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        description: string;
        animationStoragePath: string;
        imageStoragePath: string;
        serialSize: BigNumber;
        atSerialId: BigNumber;
        firstReservedToken: BigNumber;
        royaltyRecipient: string;
        royaltyBPS: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
      };
    }>;

    "getSerialByToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        description: string;
        animationStoragePath: string;
        imageStoragePath: string;
        serialSize: BigNumber;
        atSerialId: BigNumber;
        firstReservedToken: BigNumber;
        royaltyRecipient: string;
        royaltyBPS: BigNumber;
        0: string;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
      };
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mintSerial(
      serialId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintSerial(uint256,address)"(
      serialId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenIdsReserved(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tokenIdsReserved()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRoyaltyRecipient(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRoyaltyRecipient(uint256,address)"(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CREATE_SERIAL_ROLE(overrides?: CallOverrides): Promise<string>;

  "CREATE_SERIAL_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createSerial(
    name: string,
    description: string,
    imageStoragePath: string,
    animationStoragePath: string,
    serialSize: BigNumberish,
    royaltyBPS: BigNumberish,
    royaltyRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSerial(string,string,string,string,uint256,uint256,address)"(
    name: string,
    description: string,
    imageStoragePath: string,
    animationStoragePath: string,
    serialSize: BigNumberish,
    royaltyBPS: BigNumberish,
    royaltyRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentSerial(overrides?: CallOverrides): Promise<BigNumber>;

  "currentSerial()"(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getContentBaseURLs(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  "getContentBaseURLs(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSerial(
    serialId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    description: string;
    animationStoragePath: string;
    imageStoragePath: string;
    serialSize: BigNumber;
    atSerialId: BigNumber;
    firstReservedToken: BigNumber;
    royaltyRecipient: string;
    royaltyBPS: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
  }>;

  "getSerial(uint256)"(
    serialId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    description: string;
    animationStoragePath: string;
    imageStoragePath: string;
    serialSize: BigNumber;
    atSerialId: BigNumber;
    firstReservedToken: BigNumber;
    royaltyRecipient: string;
    royaltyBPS: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
  }>;

  getSerialByToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    description: string;
    animationStoragePath: string;
    imageStoragePath: string;
    serialSize: BigNumber;
    atSerialId: BigNumber;
    firstReservedToken: BigNumber;
    royaltyRecipient: string;
    royaltyBPS: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
  }>;

  "getSerialByToken(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    description: string;
    animationStoragePath: string;
    imageStoragePath: string;
    serialSize: BigNumber;
    atSerialId: BigNumber;
    firstReservedToken: BigNumber;
    royaltyRecipient: string;
    royaltyBPS: BigNumber;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
  }>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintSerial(
    serialId: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintSerial(uint256,address)"(
    serialId: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  royaltyInfo(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    receiver: string;
    royaltyAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "royaltyInfo(uint256,uint256)"(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    receiver: string;
    royaltyAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenIdsReserved(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenIdsReserved()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRoyaltyRecipient(
    serialId: BigNumberish,
    newRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRoyaltyRecipient(uint256,address)"(
    serialId: BigNumberish,
    newRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CREATE_SERIAL_ROLE(overrides?: CallOverrides): Promise<string>;

    "CREATE_SERIAL_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSerial(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createSerial(string,string,string,string,uint256,uint256,address)"(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currentSerial(overrides?: CallOverrides): Promise<BigNumber>;

    "currentSerial()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getContentBaseURLs(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "getContentBaseURLs(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSerial(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      animationStoragePath: string;
      imageStoragePath: string;
      serialSize: BigNumber;
      atSerialId: BigNumber;
      firstReservedToken: BigNumber;
      royaltyRecipient: string;
      royaltyBPS: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
    }>;

    "getSerial(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      animationStoragePath: string;
      imageStoragePath: string;
      serialSize: BigNumber;
      atSerialId: BigNumber;
      firstReservedToken: BigNumber;
      royaltyRecipient: string;
      royaltyBPS: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
    }>;

    getSerialByToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      animationStoragePath: string;
      imageStoragePath: string;
      serialSize: BigNumber;
      atSerialId: BigNumber;
      firstReservedToken: BigNumber;
      royaltyRecipient: string;
      royaltyBPS: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
    }>;

    "getSerialByToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      animationStoragePath: string;
      imageStoragePath: string;
      serialSize: BigNumber;
      atSerialId: BigNumber;
      firstReservedToken: BigNumber;
      royaltyRecipient: string;
      royaltyBPS: BigNumber;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintSerial(
      serialId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintSerial(uint256,address)"(
      serialId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenIdsReserved(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenIdsReserved()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoyaltyRecipient(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRoyaltyRecipient(uint256,address)"(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    CreatedSerial(serialId: null): EventFilter;

    MintedSerial(serialId: null, tokenId: null, minter: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    CREATE_SERIAL_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CREATE_SERIAL_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSerial(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSerial(string,string,string,string,uint256,uint256,address)"(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentSerial(overrides?: CallOverrides): Promise<BigNumber>;

    "currentSerial()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContentBaseURLs(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContentBaseURLs(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerial(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSerial(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerialByToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSerialByToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSerial(
      serialId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintSerial(uint256,address)"(
      serialId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdsReserved(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenIdsReserved()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRoyaltyRecipient(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRoyaltyRecipient(uint256,address)"(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CREATE_SERIAL_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CREATE_SERIAL_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSerial(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSerial(string,string,string,string,uint256,uint256,address)"(
      name: string,
      description: string,
      imageStoragePath: string,
      animationStoragePath: string,
      serialSize: BigNumberish,
      royaltyBPS: BigNumberish,
      royaltyRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentSerial(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentSerial()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContentBaseURLs(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContentBaseURLs(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerial(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSerial(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerialByToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSerialByToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSerial(
      serialId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintSerial(uint256,address)"(
      serialId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royaltyInfo(uint256,uint256)"(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdsReserved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenIdsReserved()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRoyaltyRecipient(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRoyaltyRecipient(uint256,address)"(
      serialId: BigNumberish,
      newRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
