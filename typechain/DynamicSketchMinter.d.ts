/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DynamicSketchMinterInterface extends ethers.utils.Interface {
  functions: {
    "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)": FunctionFragment;
    "getRelease(uint256)": FunctionFragment;
    "mint(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverETH()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPaused(uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRelease",
    values: [
      {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRelease", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OnNewRelease(uint256)": EventFragment;
    "OnPauseChange(uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnNewRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnPauseChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DynamicSketchMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DynamicSketchMinterInterface;

  functions: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)"(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        gasRule: {
          maxGasAllowed: BigNumber;
          disallowZeroGas: boolean;
          enabled: boolean;
          0: BigNumber;
          1: boolean;
          2: boolean;
        };
        ownershipRule: {
          tokenAddress: string;
          tokenIdRangeStart: BigNumber;
          tokenIdRangeEnd: BigNumber;
          enabled: boolean;
          0: string;
          1: BigNumber;
          2: BigNumber;
          3: boolean;
        };
        isPaused: boolean;
        maxAllowed: BigNumber;
        currentReleased: BigNumber;
        ethPrice: BigNumber;
        recipient: string;
        mintableAddress: string;
        mintableCollection: BigNumber;
        0: {
          maxGasAllowed: BigNumber;
          disallowZeroGas: boolean;
          enabled: boolean;
          0: BigNumber;
          1: boolean;
          2: boolean;
        };
        1: {
          tokenAddress: string;
          tokenIdRangeStart: BigNumber;
          tokenIdRangeEnd: BigNumber;
          enabled: boolean;
          0: string;
          1: BigNumber;
          2: BigNumber;
          3: boolean;
        };
        2: boolean;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: string;
        7: string;
        8: BigNumber;
      };
    }>;

    "getRelease(uint256)"(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        gasRule: {
          maxGasAllowed: BigNumber;
          disallowZeroGas: boolean;
          enabled: boolean;
          0: BigNumber;
          1: boolean;
          2: boolean;
        };
        ownershipRule: {
          tokenAddress: string;
          tokenIdRangeStart: BigNumber;
          tokenIdRangeEnd: BigNumber;
          enabled: boolean;
          0: string;
          1: BigNumber;
          2: BigNumber;
          3: boolean;
        };
        isPaused: boolean;
        maxAllowed: BigNumber;
        currentReleased: BigNumber;
        ethPrice: BigNumber;
        recipient: string;
        mintableAddress: string;
        mintableCollection: BigNumber;
        0: {
          maxGasAllowed: BigNumber;
          disallowZeroGas: boolean;
          enabled: boolean;
          0: BigNumber;
          1: boolean;
          2: boolean;
        };
        1: {
          tokenAddress: string;
          tokenIdRangeStart: BigNumber;
          tokenIdRangeEnd: BigNumber;
          enabled: boolean;
          0: string;
          1: BigNumber;
          2: BigNumber;
          3: boolean;
        };
        2: boolean;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: string;
        7: string;
        8: BigNumber;
      };
    }>;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256,uint256)"(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recoverETH(overrides?: Overrides): Promise<ContractTransaction>;

    "recoverETH()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createRelease(
    sketchReleaseGasRule: {
      maxGasAllowed: BigNumberish;
      disallowZeroGas: boolean;
      enabled: boolean;
    },
    sketchReleaseRuleOwnership: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumberish;
      tokenIdRangeEnd: BigNumberish;
      enabled: boolean;
    },
    isPaused: boolean,
    maxAllowed: BigNumberish,
    ethPrice: BigNumberish,
    recipient: string,
    mintableAddress: string,
    mintableCollection: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)"(
    sketchReleaseGasRule: {
      maxGasAllowed: BigNumberish;
      disallowZeroGas: boolean;
      enabled: boolean;
    },
    sketchReleaseRuleOwnership: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumberish;
      tokenIdRangeEnd: BigNumberish;
      enabled: boolean;
    },
    isPaused: boolean,
    maxAllowed: BigNumberish,
    ethPrice: BigNumberish,
    recipient: string,
    mintableAddress: string,
    mintableCollection: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRelease(
    releaseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    gasRule: {
      maxGasAllowed: BigNumber;
      disallowZeroGas: boolean;
      enabled: boolean;
      0: BigNumber;
      1: boolean;
      2: boolean;
    };
    ownershipRule: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumber;
      tokenIdRangeEnd: BigNumber;
      enabled: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    };
    isPaused: boolean;
    maxAllowed: BigNumber;
    currentReleased: BigNumber;
    ethPrice: BigNumber;
    recipient: string;
    mintableAddress: string;
    mintableCollection: BigNumber;
    0: {
      maxGasAllowed: BigNumber;
      disallowZeroGas: boolean;
      enabled: boolean;
      0: BigNumber;
      1: boolean;
      2: boolean;
    };
    1: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumber;
      tokenIdRangeEnd: BigNumber;
      enabled: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    };
    2: boolean;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: BigNumber;
  }>;

  "getRelease(uint256)"(
    releaseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    gasRule: {
      maxGasAllowed: BigNumber;
      disallowZeroGas: boolean;
      enabled: boolean;
      0: BigNumber;
      1: boolean;
      2: boolean;
    };
    ownershipRule: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumber;
      tokenIdRangeEnd: BigNumber;
      enabled: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    };
    isPaused: boolean;
    maxAllowed: BigNumber;
    currentReleased: BigNumber;
    ethPrice: BigNumber;
    recipient: string;
    mintableAddress: string;
    mintableCollection: BigNumber;
    0: {
      maxGasAllowed: BigNumber;
      disallowZeroGas: boolean;
      enabled: boolean;
      0: BigNumber;
      1: boolean;
      2: boolean;
    };
    1: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumber;
      tokenIdRangeEnd: BigNumber;
      enabled: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    };
    2: boolean;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: BigNumber;
  }>;

  mint(
    releaseId: BigNumberish,
    tokenOwned: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256,uint256)"(
    releaseId: BigNumberish,
    tokenOwned: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recoverETH(overrides?: Overrides): Promise<ContractTransaction>;

  "recoverETH()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setPaused(
    releaseId: BigNumberish,
    isPaused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(uint256,bool)"(
    releaseId: BigNumberish,
    isPaused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)"(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      gasRule: {
        maxGasAllowed: BigNumber;
        disallowZeroGas: boolean;
        enabled: boolean;
        0: BigNumber;
        1: boolean;
        2: boolean;
      };
      ownershipRule: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumber;
        tokenIdRangeEnd: BigNumber;
        enabled: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      };
      isPaused: boolean;
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      recipient: string;
      mintableAddress: string;
      mintableCollection: BigNumber;
      0: {
        maxGasAllowed: BigNumber;
        disallowZeroGas: boolean;
        enabled: boolean;
        0: BigNumber;
        1: boolean;
        2: boolean;
      };
      1: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumber;
        tokenIdRangeEnd: BigNumber;
        enabled: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      };
      2: boolean;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    "getRelease(uint256)"(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      gasRule: {
        maxGasAllowed: BigNumber;
        disallowZeroGas: boolean;
        enabled: boolean;
        0: BigNumber;
        1: boolean;
        2: boolean;
      };
      ownershipRule: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumber;
        tokenIdRangeEnd: BigNumber;
        enabled: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      };
      isPaused: boolean;
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      recipient: string;
      mintableAddress: string;
      mintableCollection: BigNumber;
      0: {
        maxGasAllowed: BigNumber;
        disallowZeroGas: boolean;
        enabled: boolean;
        0: BigNumber;
        1: boolean;
        2: boolean;
      };
      1: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumber;
        tokenIdRangeEnd: BigNumber;
        enabled: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      };
      2: boolean;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256,uint256)"(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverETH(overrides?: CallOverrides): Promise<void>;

    "recoverETH()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OnNewRelease(releaseId: null): EventFilter;

    OnPauseChange(releaseId: null, pauseStatus: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)"(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRelease(uint256)"(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mint(uint256,uint256)"(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recoverETH(overrides?: Overrides): Promise<BigNumber>;

    "recoverETH()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)"(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelease(uint256)"(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,uint256)"(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recoverETH(overrides?: Overrides): Promise<PopulatedTransaction>;

    "recoverETH()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
